name: CI

# Continuous Integration w/ Godot Engine and private Algorand Network
# Godot CI inspired by: https://github.com/godot-rust/godot-rust/tree/master/.github/workflows

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

  GODOT_VER: "3.4"
  GODOT_REL: stable

  SANDBOX_CONFIG: ./test/sandbox/config.test
  SANDBOX_GENESIS: ./test/sandbox/genesis/genesis.json

  # Because of genesis.json this account will start with some funds
  ALGODOT_FUNDER_MNEMONIC: "letter nasty produce hidden confirm sad color diamond allow ring truth code mirror atom obscure this opinion one life travel chat lobster cook about flight"



jobs:
  rustfmt-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: rustfmt
        run: cargo fmt --all -- --check
        
      - name: clippy
        run: cargo clippy --workspace -- -D warnings

  test:
    name: test-${{ matrix.os }}
    needs: rustfmt-clippy
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
    
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.os == 'windows-latest'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
          
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'
        working-directory: .
      
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Compile tests
        run: cargo test --workspace --no-run
      
      - name: Test
        run: cargo test --workspace

  check-build-release:
    name: build-release-${{ matrix.os }}
    needs: rustfmt-clippy
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
    
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.os == 'windows-latest'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
          
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'
        working-directory: .
      
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Release build (check only)
        run: cargo check --release
    

  integration-test-godot:
    name: itest-godot
    needs: rustfmt-clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Check cache for installed Godot version
        id: cache-godot
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/godot_bin
          key: godot-${{ runner.os }}-v${{ env.GODOT_VER }}-${{ env.GODOT_REL }}

      - name: Install Godot
        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          wget "https://downloads.tuxfamily.org/godotengine/$GODOT_VER/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64.zip" -O /tmp/godot.zip
          unzip /tmp/godot.zip -d ${{ runner.temp }}/godot_bin

      - name: Check cache for Docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-layer-caching-${{ github.workflow }}-${{ hashFiles(env.SANDBOX_CONFIG, env.SANDBOX_GENESIS) }}-{hash}
          restore-keys: docker-layer-caching-${{ github.workflow }}-${{ hashFiles(env.SANDBOX_CONFIG, env.SANDBOX_GENESIS) }}-

      - name: Algorand private network
        uses: lucasvanmol/algorand-sandbox-action@v1
        with:
          config: ${{ env.SANDBOX_CONFIG }}
      
      - name: Test transaction on private network
        run: |
          curl --fail --show-error -i -X POST \
            -H "X-Algo-API-Token: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" \
            -H "Content-Type:application/x-binary" \
            -T "${{ github.workspace }}/test/sandbox/test.stxn" \
            localhost:4001/v1/transactions


      - name: Build Algodot
        run: cargo build
        
      - name: Run Godot integration tests
        run: |
          cd test;
          mkdir -p ./project/addons/algodot/lib;
          cp ../target/debug/libalgodot.so ./project/addons/algodot/lib/;
          "${{ runner.temp }}/godot_bin/Godot_v${GODOT_VER}-${GODOT_REL}_linux_headless.64" --path ./project/ > >(tee "${{ runner.temp }}/stdout.log");
          if grep -q "Leaked instance" "${{ runner.temp }}/stdout.log"; then
            exit 1;
          fi;

  # # Linux containers on windows runners are not well supported
  # # Need to find another solution for CD
  # deploy-build-release:
  #   name: build-release-windows
  #   needs: integration-test-godot
  #   runs-on: windows-latest
  #   steps:
    
  #     - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
  #       uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
  #       with:
  #         version: "11.0"
  #         directory: ${{ runner.temp }}/llvm
          
  #     - name: Set LIBCLANG_PATH
  #       run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
  #       working-directory: .
      
  #     - uses: actions/checkout@v2

  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true

  #     - name: Install cross
  #       run: cargo install cross
      
  #     - name: Build
  #       run: ./build.ps1

  #     - name: Push
  #       uses: s0/git-publish-subdir-action@develop
  #       env:
  #         REPO: self
  #         BRANCH: build
  #         FOLDER: target/build 
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         MESSAGE: "Build: ({sha}) {msg}"
